// Personal Justifications

THRESHOLD_CLOSED = (Math.PI / 36) // 5 degrees
THRESHOLD_OPEN = (Math.PI / 4) // 45 degrees

I have chosen threshold values to be in the form of angles because this will take the relative positions of the scissor arms
into account instead of the phyiscal distance. This will take into account offsets of the scissor from the origin (0,0) and
take into acount scaling caused from zooming in or out so the ratio of the images do not affect the outcome.

I chose the close threshold to be 5 degrees because not everyone closes scissors completely when cutting, especially when cutting fast.
Personally, I leave a bit of space depending on what I am cutting. This allows for some human error to exist but still consider
the closing action as complete. For example, if someone was cutting paper or a sheet of thin foil, they might rapidly open and close
the scissor and not conciously try to fully close the scissor each time, as they can still accpomplish their tasks without fully closing the scissors
There is no scientific reason for choosing 5, I just felt the number was reasonably small and still takes into account the above 
considerations.

The open threshold is chosen to be 45 degrees. This was mainly an estimate of how wide people open scissors. There will never be
an exact way to determine how large people open scissors so I chose one that made sense to the average person.
(I realized I open them around 40 - 45 degrees when cutting paper or green onions haha)
It does not specifically have to be 45 degrees, but I thought this was reasononable and realistic.

// Implementation

Since we have 3 coordinate points, we can form a triangle. In my code, I denote each side as A, B, and C.
Side A of this 'triangle' would be the length of the top scissor arm, B is the bottom scissor arm, and side C is
the side length of the coordinate points of the top and bottom of the scissor arms.
This means side C is opposite to the angle we are trying to determine.

algorithm:
- set scissor `isOpen` to be true or false depending on the first frame data to determine if the scissor starts open or closed
for the rest of the frames, repeat:
- determine the angle between the top and bottom scissor arm using cosine law
- if scissor angle is larger than THRESHOLD_OPEN then increase the number of openings by 1 and set `isOpen` to true
- if scissor angle is smaller than THRESHOLD_CLOSED then increase the number of closings by 1 and set `isOpen` to false
return number of openings (or closings if desired)

1. What would be the other different orientations/cases that are possible?
2. How would you update your algorithm (if you need to) for these new cases in (1)
3. For testing purposes, if you had to generate frames data, how would you go about it?

// Questions to consider

1.
Yes, currently we are given coordinate points for a scissor pointing to the right.
The examples show only points with one point in the Quadrant 1 and Quadrant 4 which are always negative of the other.

Nothing in real life or data collection stops the scissors from pointing upwards, or from being asymetrical.
We do not know enough about the computer vision model in the question specifications to assume that the sissors will always pointing
to the right.

For example, if the scissors were rotated sideways, or shifted in any direction from the center point, lets say (0,0) for simplicity's sake
then the orientation and data would look different than that provided in the "frames" sample data.

Furthermore, images could be zoomed and scaled. In the "frames" sample data the values of points are in the domain of [0, 1].
However, if some scissors are bigger, or the computer vision model is moved closer or further from the scissors, this could change.
This is why I chose a threshold amount to be an angle instead of an asolute value such as distance.

2. 
I have already updated the data so that it takes into account the cases where the center point is not (0,0) by incorporating
them into the `calculateOpenings` function. I have used angles as the treshold instead of a distance so regardless of the values
of the coordinate on the plane, all that matters is the relative distances and angles they form with respect to each other.
If someone would want to know the number of times the scissor closed, they could return the `closings` value instead.


3. 
For generating tests, I would test edge cases, getting close to both thresholds or getting exactly on the thresholds and seeing if 
the desired result is produced.

Realisitcally, one would test the actual scissors and determine if the threshold values are approriate. This is to account for
different people with different hand sizes and the way they use scissors may be different.

I would also test different orientation from (1) to see if the results are as desired as well this may include:
- rotating the scissor
- scaling the scissor
- flipping the scissors